diff --git mlibc-clean/abis/linux/in.h mlibc-workdir/abis/linux/in.h
index bb5b6ef..8d66fe8 100644
--- mlibc-clean/abis/linux/in.h
+++ mlibc-workdir/abis/linux/in.h
@@ -86,6 +86,10 @@ struct group_req {
 #define INET_ADDRSTRLEN  16
 #define INET6_ADDRSTRLEN 46
 
+#define IPV6_MULTICAST_HOPS 18
+
+#define IP_MULTICAST_TTL 33
+
 #define IPPORT_RESERVED 1024
 
 #define IPPROTO_IP       0
diff --git mlibc-clean/options/glibc/generic/execinfo.cpp mlibc-workdir/options/glibc/generic/execinfo.cpp
index 3474615..de088e9 100644
--- mlibc-clean/options/glibc/generic/execinfo.cpp
+++ mlibc-workdir/options/glibc/generic/execinfo.cpp
@@ -1,17 +1,18 @@
 #include <execinfo.h>
 #include <bits/ensure.h>
+// #include <mlibc/debug.hpp>
 
-int backtrace(void **, int) {
-	__ensure(!"Not implemented");
-	__builtin_unreachable();
-}
+// int backtrace(void **, int) {
+// 	mlibc::infoLogger() << "backtrace() is a stub" << frg::endlog;
+// 	return 0;
+// }
 
-char **backtrace_symbols(void *const *, int) {
-	__ensure(!"Not implemented");
-	__builtin_unreachable();
-}
+// char **backtrace_symbols(void *const *, int) {
+// 	__ensure(!"Not implemented");
+// 	__builtin_unreachable();
+// }
 
-void backtrace_symbols_fd(void *const *, int, int) {
-	__ensure(!"Not implemented");
-	__builtin_unreachable();
-}
+// void backtrace_symbols_fd(void *const *, int, int) {
+// 	__ensure(!"Not implemented");
+// 	__builtin_unreachable();
+// }
diff --git mlibc-clean/sysdeps/lyre/generic/generic.cpp mlibc-workdir/sysdeps/lyre/generic/generic.cpp
index 374e30a..c6fe6ae 100644
--- mlibc-clean/sysdeps/lyre/generic/generic.cpp
+++ mlibc-workdir/sysdeps/lyre/generic/generic.cpp
@@ -39,6 +39,26 @@ void sys_exit(int status) {
 
 #ifndef MLIBC_BUILDING_RTDL
 
+[[noreturn]] void sys_thread_exit() {
+	__syscall(SYS_exit_thread);
+	__builtin_unreachable();
+}
+
+extern "C" void __mlibc_thread_entry();
+
+int sys_clone(void *tcb, pid_t *pid_out, void *stack) {
+	(void)tcb;
+
+	__syscall_ret ret = __syscall(SYS_new_thread, (uintptr_t)__mlibc_thread_entry, (uintptr_t)stack);
+	int ret_value = (int)ret.ret;
+	if (ret_value == -1) {
+		return ret.errno;
+	}
+
+	*pid_out = ret_value;
+	return 0;
+}
+
 int sys_kill(pid_t, int) STUB_ONLY
 
 int sys_tcgetattr(int fd, struct termios *attr) {
@@ -420,7 +440,13 @@ int sys_vm_unmap(void *pointer, size_t size) {
 
 #ifndef MLIBC_BUILDING_RTDL
 
-int sys_vm_protect(void *, size_t, int) STUB_ONLY
+int sys_vm_protect(void *pointer, size_t size, int prot) {
+	__syscall_ret ret = __syscall(SYS_mprotect, pointer, size, prot);
+	if ((int)ret.ret == -1) {
+		return ret.errno;
+	}
+	return 0;
+}
 
 #endif
 
@@ -751,7 +777,10 @@ again:
 	return 0;
 }
 
-int sys_getgroups(size_t, const gid_t *, int *) STUB_ONLY
+int sys_getgroups(size_t, const gid_t *, int *) {
+	mlibc::infoLogger() << "mlibc: sys_getgroups() is unimplemented" << frg::endlog;
+	return ENOSYS;
+}
 
 int sys_mount(const char *, const char *, const char *, unsigned long, const void *) STUB_ONLY
 
diff --git mlibc-workdir/sysdeps/lyre/generic/thread.S mlibc-workdir/sysdeps/lyre/generic/thread.S
new file mode 100644
index 0000000..47ab6a9
--- /dev/null
+++ mlibc-workdir/sysdeps/lyre/generic/thread.S
@@ -0,0 +1,9 @@
+.section .text
+.global __mlibc_thread_entry
+__mlibc_thread_entry:
+	pop %rdi
+	pop %rsi
+	pop %rdx
+	call __mlibc_thread_trampoline
+
+.section .note.GNU-stack,"",%progbits
diff --git mlibc-workdir/sysdeps/lyre/generic/thread.cpp mlibc-workdir/sysdeps/lyre/generic/thread.cpp
new file mode 100644
index 0000000..800d4ad
--- /dev/null
+++ mlibc-workdir/sysdeps/lyre/generic/thread.cpp
@@ -0,0 +1,54 @@
+#include <sys/mman.h>
+#include <mlibc/debug.hpp>
+#include <errno.h>
+#include <mlibc/all-sysdeps.hpp>
+#include <bits/ensure.h>
+#include <mlibc/tcb.hpp>
+
+extern "C" void __mlibc_thread_trampoline(void *(*fn)(void *), Tcb *tcb, void *arg) {
+	if (mlibc::sys_tcb_set(tcb)) {
+	    __ensure(!"failed to set tcb for new thread");
+	}
+
+	while (__atomic_load_n(&tcb->tid, __ATOMIC_RELAXED) == 0) {
+        mlibc::sys_futex_wait(&tcb->tid, 0, nullptr);
+	}
+
+	tcb->returnValue = fn(arg);
+
+	__atomic_store_n(&tcb->didExit, 1, __ATOMIC_RELEASE);
+	mlibc::sys_futex_wake(&tcb->didExit);
+
+	mlibc::sys_thread_exit();
+}
+
+#define DEFAULT_STACK 0x400000
+
+namespace mlibc {
+	int sys_prepare_stack(void **stack, void *entry, void *arg, void *tcb, size_t *stack_size, size_t *guard_size) {
+		// TODO guard
+
+		mlibc::infoLogger() << "mlibc: sys_prepare_stack() does not setup a guard!" << frg::endlog;
+
+		*guard_size = 0;
+
+		*stack_size = *stack_size ? *stack_size : DEFAULT_STACK;
+
+		if (!*stack) {
+			*stack = mmap(NULL, *stack_size, PROT_READ | PROT_WRITE, MAP_ANONYMOUS | MAP_PRIVATE, -1, 0) + *stack_size;
+			if (*stack == MAP_FAILED) {
+				return errno;
+			}
+		}
+
+		void **stack_it = (void **)*stack;
+
+		*--stack_it = arg;
+		*--stack_it = tcb;
+		*--stack_it = entry;
+
+		*stack = (void *)stack_it;
+
+		return 0;
+	}
+}
diff --git mlibc-clean/sysdeps/lyre/include/lyre/syscall.h mlibc-workdir/sysdeps/lyre/include/lyre/syscall.h
index af8e0cb..db83175 100644
--- mlibc-clean/sysdeps/lyre/include/lyre/syscall.h
+++ mlibc-workdir/sysdeps/lyre/include/lyre/syscall.h
@@ -37,7 +37,7 @@
 #define SYS_sleep 31
 #define SYS_ppoll 32
 #define SYS_umask 33
-#define SYS_getmemstat 34
+#define SYS_mprotect 34
 #define SYS_getclock 35
 #define SYS_socket 36
 #define SYS_bind 37
@@ -46,6 +46,8 @@
 #define SYS_accept 40
 #define SYS_getpeername 41
 #define SYS_recvmsg 42
+#define SYS_new_thread 43
+#define SYS_exit_thread 44
 
 struct __syscall_ret {
 	uint64_t ret;
diff --git mlibc-clean/sysdeps/lyre/meson.build mlibc-workdir/sysdeps/lyre/meson.build
index a53ef2f..1e4010b 100644
--- mlibc-clean/sysdeps/lyre/meson.build
+++ mlibc-workdir/sysdeps/lyre/meson.build
@@ -5,7 +5,9 @@ rtdl_sources += files(
 
 libc_sources += files(
 	'generic/entry.cpp',
-	'generic/generic.cpp'
+	'generic/generic.cpp',
+	'generic/thread.cpp',
+	'generic/thread.S'
 )
 
 if not no_headers
